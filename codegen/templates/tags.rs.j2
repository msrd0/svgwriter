// @generated

use crate::Tag;
use indexmap::IndexMap;
use std::fmt::{self, Debug, Display, Formatter};
use xmlwriter::XmlWriter;

{%- for (name, elem) in elements %}

{%- if !elem.attributes.is_empty() %}

#[derive(Clone, Copy, Eq, Hash, PartialEq)]
enum {{name|camel_case}}Attrs {
	{%- for attr in elem.attributes %}
	{{attr|camel_case}},
	{%- endfor %}
}

impl {{name|camel_case}}Attrs {
	fn as_str(&self) -> &'static str {
		match self {
			{%- for attr in elem.attributes %}
			Self::{{attr|camel_case}} => "{{attr}}",
			{%- endfor %}
		}
	}
}

impl Display for {{name|camel_case}}Attrs {
	fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
		f.write_str(self.as_str())
	}
}

impl Debug for {{name|camel_case}}Attrs {
	fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
		f.write_str(self.as_str())
	}
}

{%- endif %}

#[doc = "The [`<{{name}}>`] svg tag.\n\n# Content\n"]
#[doc = include_str!("{{name}}.md")]
#[doc = "\n\n [`<{{name}}>`]: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/{{name}}"]
#[derive(Clone, Debug)]
pub struct {{name|camel_case}} {
	{%- if !elem.attributes.is_empty() %}
	attrs: IndexMap<{{name|camel_case}}Attrs, String>,
	{%- endif %}
}

impl Default for {{name|camel_case}} {
	fn default() -> Self {
		Self::new()
	}
}

impl {{name|camel_case}} {
	/// Create a new, empty tag.
	pub fn new() -> Self {
		Self {
			{%- if !elem.attributes.is_empty() %}
			attrs: IndexMap::new(),
			{%- endif %}
		}
	}

	{%- if !elem.attributes.is_empty() %}

	fn set_attr(&mut self, attr: {{name|camel_case}}Attrs, value: String) {
		self.attrs.shift_remove(&attr);
		self.attrs.insert(attr, value);
	}

	{%- for attr in elem.attributes %}

	/// Set the `{{attr}}` attribute.
	pub fn with_{{attr|snake_case}}<T>(mut self, value: T) -> Self
	where
		T: Into<String>
	{
		self.set_attr({{name|camel_case}}Attrs::{{attr|camel_case}}, value.into());
		self
	}

	/// Set the `{{attr}}` attribute.
	pub fn set_{{attr|snake_case}}<T>(&mut self, value: T)
	where
		T: Into<String>
	{
		self.set_attr({{name|camel_case}}Attrs::{{attr|camel_case}}, value.into());
	}

	/// Get the `{{attr}}` attribute.
	pub fn {{attr|snake_case}}(&self) -> Option<&str> {
		self.attrs.get(&{{name|camel_case}}Attrs::{{attr|camel_case}}).map(String::as_str)
	}

	{%- endfor %}
	{%- endif %}
}

impl Tag for {{name|camel_case}} {
	fn write_to(&self, w: &mut XmlWriter, pretty: bool) {
		w.start_element("{{name}}");
		{%- if name == "text" || name == "tspan" %}
		w.set_preserve_whitespaces(true);
		{%- endif %}
		
		{%- if !elem.attributes.is_empty() %}
		for (attr, value) in &self.attrs {
			w.write_attribute(attr.as_str(), &value);
		}
		{% endif -%}
		
		w.end_element();
		{%- if name == "text" %}
		w.set_preserve_whitespaces(false);
		{%- endif %}
	}
}

{%- endfor %}
