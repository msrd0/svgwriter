{%- import "_macros.rs.j2" as macros -%}
// @generated

use crate::{tag::Tag, value::Value};
use indexmap::IndexMap;
use std::fmt::{self, Debug, Display, Formatter};
use xmlwriter::XmlWriter;

mod common_attrs;
pub use common_attrs::prelude::*;

{%- for (name, elem) in elements %}

{%- if !elem.attributes.is_empty() || !elem.attribute_categories.is_empty() %}

{% call macros::attr_enum(
	(name == "svg").then_some("pub(crate)").unwrap_or_default(),
	"{}Attrs"|format(name|camel_case),
	elem.attributes,
	elem.attribute_categories,
	name == "svg"
) %}

{%- endif %}

{%- if !elem.content.elements.is_empty() %}

mod {{name|snake_case}}_private {
	use crate::tag::Tag;
	use std::fmt::Debug;

	pub trait Content: Tag + Debug {}
	{%- for content in elem.content.elements %}
	impl Content for super::{{content|camel_case}} {}
	{%- endfor %}
	{%- if name == "text" || name == "tspan" %}
	impl Content for String {}
	impl Content for &'static str {}
	{%- endif %}
}

{%- endif %}

#[doc = "The [`<{{name}}>`] svg tag.\n\n# Content\n"]
#[doc = include_str!("{{name}}.md")]
#[doc = concat!(
	"\n## Elements\n\nThese elements are allowed to appear within this tag:\n"
	{%- for content in elem.content.elements %},
	"- [`<{{content}}>`]({{content|camel_case}})\n"
	{%- endfor %}
)]
#[doc = "\n\n [`<{{name}}>`]: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/{{name}}"]
#[derive(Debug)]
pub struct {{name|camel_case}} {
	{%- if !elem.attributes.is_empty() || !elem.attribute_categories.is_empty() %}
	attrs: IndexMap<{{name|camel_case}}Attrs, Box<dyn Value>>,
	{%- endif %}
	{%- if !elem.content.elements.is_empty() %}
	content: Vec<Box<dyn {{name|snake_case}}_private::Content>>,
	{%- endif %}
}

impl Default for {{name|camel_case}} {
	fn default() -> Self {
		Self::new()
	}
}

impl {{name|camel_case}} {
	/// Create a new, empty tag.
	pub fn new() -> Self {
		Self {
			{%- if !elem.attributes.is_empty() || !elem.attribute_categories.is_empty() %}
			attrs: IndexMap::new(),
			{%- endif %}
			{%- if !elem.content.elements.is_empty() %}
			content: Vec::new(),
			{%- endif %}
		}
	}

	{%- if !elem.content.elements.is_empty() %}

	pub fn push<T>(&mut self, content: T)
	where
		T: {{name|snake_case}}_private::Content + 'static
	{
		self.content.push(Box::new(content));
	}

	pub fn append<T>(mut self, content: T) -> Self
	where
		T: {{name|snake_case}}_private::Content + 'static
	{
		self.push(content);
		self
	}

	{%- endif %}
	{%- if !elem.attributes.is_empty() || !elem.attribute_categories.is_empty() %}

	{% if name == "svg" %}pub(crate) {% endif -%}
	fn set_attr<V>(&mut self, attr: {{name|camel_case}}Attrs, value: V)
	where
		V: Value + 'static
	{
		self.attrs.shift_remove(&attr);
		self.attrs.insert(attr, Box::new(value));
	}

	fn get_attr(&self, attr: {{name|camel_case}}Attrs) -> Option<&dyn Value> {
		self.attrs.get(&attr).map(Box::as_ref)
	}

	{%- call macros::attrs_get_set("pub", "{}Attrs"|format(name|camel_case), elem.attributes) %}

	{%- endif %}
}

{%- for cat in elem.attribute_categories %}

impl common_attrs::{{cat|camel_case}}Setter for {{name|camel_case}} {
	fn set_attr<V>(&mut self, attr: common_attrs::{{cat|camel_case}}, value: V)
	where
		V: Value + 'static
	{
		self.set_attr({{name|camel_case}}Attrs::from(attr), value);
	}

	fn get_attr(&self, attr: common_attrs::{{cat|camel_case}}) -> Option<&dyn Value> {
		self.get_attr({{name|camel_case}}Attrs::from(attr))
	}
}

impl TagWith{{cat|camel_case}} for {{name|camel_case}} {}

{%- endfor %}

impl Tag for {{name|camel_case}} {
	fn write_to(&self, w: &mut XmlWriter, #[allow(unused_variables)] pretty: bool) {
		w.start_element("{{name}}");
		{% if name == "text" || name == "tspan" -%}
		w.set_preserve_whitespaces(true);
		{% endif -%}
		
		{% if !elem.attributes.is_empty() -%}
		for (attr, value) in &self.attrs {
			let value = value.to_string(pretty);
			w.write_attribute(attr.as_str(), &value);
		}
		{% endif -%}
		
		{% if !elem.content.elements.is_empty() -%}
		for tag in &self.content {
			tag.write_to(w, pretty);
		}
		{% endif -%}

		w.end_element();
		{%- if name == "text" %}
		w.set_preserve_whitespaces(false);
		{%- endif %}
	}
}

{%- endfor %}
