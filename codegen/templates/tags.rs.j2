{%- import "_macros.rs.j2" as macros -%}
// @generated

use crate::Tag;
use indexmap::IndexMap;
use std::fmt::{self, Debug, Display, Formatter};
use xmlwriter::XmlWriter;

mod common_attrs;
pub use common_attrs::prelude::*;

{%- for (name, elem) in elements %}

{%- if !elem.attributes.is_empty() %}

{% call macros::attr_enum("", "{}Attrs"|format(name), elem.attributes) %}

{%- endif %}

#[doc = "The [`<{{name}}>`] svg tag.\n\n# Content\n"]
#[doc = include_str!("{{name}}.md")]
#[doc = "\n\n [`<{{name}}>`]: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/{{name}}"]
#[derive(Clone, Debug)]
pub struct {{name|camel_case}} {
	{%- if !elem.attributes.is_empty() %}
	attrs: IndexMap<{{name|camel_case}}Attrs, String>,
	{%- endif %}
}

impl Default for {{name|camel_case}} {
	fn default() -> Self {
		Self::new()
	}
}

impl {{name|camel_case}} {
	/// Create a new, empty tag.
	pub fn new() -> Self {
		Self {
			{%- if !elem.attributes.is_empty() %}
			attrs: IndexMap::new(),
			{%- endif %}
		}
	}

	{%- if !elem.attributes.is_empty() %}

	fn set_attr(&mut self, attr: {{name|camel_case}}Attrs, value: String) {
		self.attrs.shift_remove(&attr);
		self.attrs.insert(attr, value);
	}

	fn get_attr(&self, attr: {{name|camel_case}}Attrs) -> Option<&str> {
		self.attrs.get(&attr).map(String::as_str)
	}

	{%- call macros::attrs_get_set("pub", "{}Attrs"|format(name), elem.attributes) %}

	{%- endif %}
}

impl Tag for {{name|camel_case}} {
	fn write_to(&self, w: &mut XmlWriter, pretty: bool) {
		w.start_element("{{name}}");
		{%- if name == "text" || name == "tspan" %}
		w.set_preserve_whitespaces(true);
		{%- endif %}
		
		{%- if !elem.attributes.is_empty() %}
		for (attr, value) in &self.attrs {
			w.write_attribute(attr.as_str(), &value);
		}
		{% endif -%}
		
		w.end_element();
		{%- if name == "text" %}
		w.set_preserve_whitespaces(false);
		{%- endif %}
	}
}

{%- endfor %}
