{%- import "_macros.rs.j2" as macros -%}
// @generated

use crate::value::Value;
use std::fmt::{self, Debug, Display, Formatter};

{%- for (cat, attrs) in categories %}

{% call macros::attr_enum("pub", cat, attrs, empty_array, false) %}

pub trait {{cat|camel_case}}Setter {
	fn set_attr<V>(&mut self, attr: {{cat|camel_case}}, value: V)
	where
		V: Value + 'static;
	
	fn get_attr(&self, attr: {{cat|camel_case}}) -> Option<&dyn Value>;
}

pub trait TagWith{{cat|camel_case}}: {{cat|camel_case}}Setter + Sized {
	{%- call macros::attrs_get_set("", cat, attrs) %}
}

{%- endfor %}

pub(super) mod prelude {
	pub use super::{
		{%- for cat in categories.keys() %}
		TagWith{{cat|camel_case}},
		{%- endfor %}
	};
}
