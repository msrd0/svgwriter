{% macro attr_enum(vis, name, attrs) -%}
#[derive(Clone, Copy, Eq, Hash, PartialEq)]
{% if !vis.is_empty() %}{{vis}} {% endif -%}
enum {{name|camel_case}} {
	{%- for attr in attrs.iter() %}
	{{attr|camel_case}},
	{%- endfor %}
}

impl {{name|camel_case}} {
	fn as_str(&self) -> &'static str {
		match self {
			{%- for attr in attrs.iter() %}
			Self::{{attr|camel_case}} => "{{attr}}",
			{%- endfor %}
		}
	}
}

impl Display for {{name|camel_case}} {
	fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
		f.write_str(self.as_str())
	}
}

impl Debug for {{name|camel_case}} {
	fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
		f.write_str(self.as_str())
	}
}
{%- endmacro %}

{% macro attrs_get_set(vis, attr_enum, attrs) -%}
	{%- for attr in attrs.iter() %}

	/// Set the `{{attr}}` attribute.
	{% if !vis.is_empty() %}{{vis}} {% endif -%}
	fn with_{{attr|snake_case}}<T>(mut self, value: T) -> Self
	where
		T: Into<String>
	{
		self.set_attr({{attr_enum|camel_case}}::{{attr|camel_case}}, value.into());
		self
	}

	/// Set the `{{attr}}` attribute.
	{% if !vis.is_empty() %}{{vis}} {% endif -%}
	fn set_{{attr|snake_case}}<T>(&mut self, value: T)
	where
		T: Into<String>
	{
		self.set_attr({{attr_enum|camel_case}}::{{attr|camel_case}}, value.into());
	}

	/// Get the `{{attr}}` attribute.
	{% if !vis.is_empty() %}{{vis}} {% endif -%}
	fn {{attr|snake_case}}(&self) -> Option<&str> {
		self.get_attr({{attr_enum|camel_case}}::{{attr|camel_case}})
	}
	{%- endfor %}
{%- endmacro %}
