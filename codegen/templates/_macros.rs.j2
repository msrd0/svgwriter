{% macro attr_enum(vis, name, attrs, cats, custom) -%}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, Eq, Hash, PartialEq)]
{% if !vis.is_empty() %}{{vis}} {% endif -%}
enum {{name|camel_case}} {
	{%- for attr in attrs.iter() %}
	{{attr|camel_case}},
	{%- endfor %}
	{%- for cat in cats.iter() %}
	{{cat|camel_case}}(common_attrs::{{cat|camel_case}}),
	{%- endfor %}
	{%- if custom %}
	Custom(&'static str),
	{%- endif %}
}

{%- for cat in cats.iter() %}

impl From<common_attrs::{{cat|camel_case}}> for {{name|camel_case}} {
	fn from(attr: common_attrs::{{cat|camel_case}}) -> Self {
		Self::{{cat|camel_case}}(attr)
	}
}

{%- endfor %}

{%- if custom %}

impl From<&'static str> for {{name|camel_case}} {
	fn from(attr: &'static str) -> Self {
		Self::Custom(attr)
	}
}

{%- endif %}

impl {{name|camel_case}} {
	{% if !vis.is_empty() %}{{vis}} {% endif -%}
	fn as_str(&self) -> &'static str {
		match self {
			{%- for attr in attrs.iter() %}
			Self::{{attr|camel_case}} => "{{attr}}",
			{%- endfor %}
			{%- for cat in cats.iter() %}
			Self::{{cat|camel_case}}(attr) => attr.as_str(),
			{%- endfor %}
			{%- if custom %}
			Self::Custom(attr) => attr,
			{%- endif %}
		}
	}
}

impl Display for {{name|camel_case}} {
	fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
		f.write_str(self.as_str())
	}
}

impl Debug for {{name|camel_case}} {
	fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
		f.write_str(self.as_str())
	}
}
{%- endmacro %}

{% macro attrs_get_set(vis, attr_enum, attrs) -%}
	{%- for attr in attrs.iter() %}

	/// Set the `{{attr}}` attribute.
	{% if !vis.is_empty() %}{{vis}} {% endif -%}
	fn with_{{attr|snake_case}}<V>(mut self, value: V) -> Self
	where
		V: Value + 'static
	{
		self.set_attr({{attr_enum|camel_case}}::{{attr|camel_case}}, value);
		self
	}

	/// Set the `{{attr}}` attribute.
	{% if !vis.is_empty() %}{{vis}} {% endif -%}
	fn set_{{attr|snake_case}}<V>(&mut self, value: V)
	where
		V: Value + 'static
	{
		self.set_attr({{attr_enum|camel_case}}::{{attr|camel_case}}, value);
	}

	/// Get the `{{attr}}` attribute.
	{% if !vis.is_empty() %}{{vis}} {% endif -%}
	fn {{attr|snake_case}}(&self) -> Option<&dyn Value> {
		self.get_attr({{attr_enum|camel_case}}::{{attr|camel_case}})
	}
	{%- endfor %}
{%- endmacro %}
